set runtimepath^=~/.vim
call plug#begin('~/.vim/plugged')
Plug 'rbgrouleff/bclose.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'rose-pine/neovim'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'ojroques/vim-oscyank', {'branch': 'main'}
Plug 'rebelot/kanagawa.nvim'
Plug 'catppuccin/nvim'
Plug 'ibhagwan/fzf-lua'
Plug 'nvim-tree/nvim-web-devicons'

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'nvim-telescope/telescope.nvim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}  " LSP框架 [citation](1)
Plug 'neoclide/coc-snippets'                    " 片段引擎
Plug 'honza/vim-snippets'                       " 通用片段库

Plug 'SirVer/ultisnips'         " 片段引擎

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSInstallSync all' }
Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-lua/plenary.nvim'

Plug 'folke/tokyonight.nvim'
Plug 'karb94/neoscroll.nvim'

Plug 'vim-scripts/taglist.vim'
Plug 'tomasr/molokai'
Plug 'preservim/nerdtree'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch-easymotion.vim'

Plug 'git@github.com:vim-scripts/c.vim.git'
Plug 'vim-scripts/c.vim'

Plug 'voldikss/vim-floaterm'
Plug 'francoiscabrol/ranger.vim'

Plug 'matze/vim-move'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'

Plug 'terryma/vim-multiple-cursors'
Plug 'mg979/vim-visual-multi'

Plug 'preservim/tagbar'
Plug 'kshenoy/vim-signature'
Plug 'terryma/vim-expand-region'
call plug#end()

filetype indent off
syntax on
colorscheme kanagawa
set cmdheight=1
set foldcolumn=0
set nowrapscan
set history=500
set t_Co=256
set mouse=a
set hlsearch
set cindent
set linebreak
set nocompatible
"set sidescroll=5
set encoding=utf-8
set fileencoding=utf-8
set showcmd
set ruler
set nocursorline
set showtabline=0
set nomore
set incsearch
set showmatch
set matchtime=50
set helplang=cn
set langmenu=zh_CN.UTF-8
set noswapfile
set nowb
set mousemodel=extend
set sm
set smartcase
set smarttab
set signcolumn=no
set title
set tabstop=4
set shiftwidth=4
set nowritebackup
set nobackup
set noautowrite
set copyindent
set ttyfast
set report=0
set synmaxcol=1000
set autoread
set lazyredraw
set lbr
set tw=500
set ai "Auto indent
"set nu
"set relativenumber
set si "Smart indent
set nowrap "Wrap lines
set switchbuf+=useopen
set switchbuf+=usetab
set wildmenu
set wildignore+=.*
set foldenable
set foldmethod=manual
set sessionoptions-=options
set completeopt=longest,menu
set list
set listchars=tab:›\ ,trail:.,extends:#,nbsp:.
set fileencodings=utf-8,gbk,gb18030,gb2312,ucs-bom,cp936,latin1
set hid
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set laststatus=0
set complete+=k
inoremap <silent> <C-i> <C-x><C-k>
set dictionary+=~/.vim/words
set dictionary+=~/.vim/dict/my_dict.txt

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <C-r>=strftime("20%y-%m-%d %H:%M:%S")<cr>
set statusline=%#StatusLineFileName#>>>[%l][%t]%#StatusFunction#[%{get(b:,'current_func','')}]%#GitColor#%{fugitive#statusline()}%#StatusLinePath#[%{getcwd()}]<<<

"=====================================================begin func====================================

function! SetupCustomStatusLine()
  " 定义高亮组（添加唯一前缀避免冲突）
  execute "hi StatusLinePath ctermfg=233 ctermbg=104"
  execute "hi GitColor ctermfg=233 ctermbg=46"
  execute "hi StatusLineFileName ctermfg=233 ctermbg=190"
  execute "hi StatusFunction ctermfg=233 ctermbg=177"

  execute "hi Search ctermbg=white ctermfg=black"
  execute "hi Visual ctermbg=235 ctermfg=none"

  set statusline=%#StatusLineFileName#>>>[%l][%t]%#StatusFunction#[%{get(b:,'current_func','')}]%#GitColor#%{fugitive#statusline()}%#StatusLinePath#[%{getcwd()}]<<<
endfunction

function! UpdateCurrentFunc()
    let lnum = line('.')
    let fname = ''
    let reserved = ['if', 'else', 'elseif', 'return']
    for i in reverse(range(1, lnum))
        let line_text = getline(i)
        if line_text =~# '^\s*\(if\|else\>\)'
            continue
        endif
        if line_text =~ '^\s*\%(\w\+\s\+\)\+\w\+\s*('
            let fname = matchstr(line_text, '\v\w+\ze\s*\(')
            if index(reserved, fname) != -1
                continue
            endif
            break
        endif
    endfor
    let b:current_func = fname

	if winnr('$') > 1
	else
	execute "resize +3"
	endif
endfunction
autocmd CursorMoved,CursorMovedI * call UpdateCurrentFunc()
"=====================================================end func====================================


"=====================================================begin func====================================
function! DeleteVisualMatch()
    " 获取可视模式下选中的内容
    let [line_start, col_start] = getpos("'<")[1:2]
    let [line_end, col_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return
    endif
    let lines[-1] = lines[-1][: col_end - 1]
    let lines[0] = lines[0][col_start - 1:]
    let selected_text = join(lines, "\n")

    " 查找匹配 ID 并删除
    for match in getmatches()
        if match['pattern'] == selected_text
            call matchdelete(match['id'])
            echo "Deleted match ID: " . match['id']
            return
        endif
    endfor
    echo "No match found for selected text."
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! HighlightWithColorCode(color_code) range
	let start_line = a:firstline
	let end_line = a:lastline
	let start_col = col("'<")
	let end_col = col("'>")
	let selected_text = getline(start_line)[start_col-1 : end_col-1]

	if  a:color_code == 999
		echo "clear all"
	call clearmatches()
		return
	endif

	if a:color_code < 0 || a:color_code > 255
		echo "Invalid color code: " . a:color_code
		return
	endif

	let hl_group = 'MyColor' . a:color_code
	try
		execute 'highlight ' . hl_group . ' ctermbg=' . a:color_code . ' guibg=' . a:color_code
	catch /E254/
		echo "color:" . a:color_code
	endtry

	call matchadd(hl_group, selected_text)
endfunction
"=====================================================end func====================================

command! -range -nargs=1 HighlightWithColorCode call HighlightWithColorCode(<f-args>)


"=====================================================begin func====================================
function! LoadTags()
if exists("g:neovide")
	execute "set tags=tags"
else
	call system("mv tags/* .")
	let tags = ""
	for tagfile in split(glob("tag_2025_Will_Rich_*"), "\n")
		if stridx(&tags, tagfile) == -1
			let tags .= tagfile . ","
		endif
	endfor

	let tags = substitute(tags, ',$', '', '')
	execute "set tags+=" . tags
endif
	execute "set tags+=linux-master-tags"
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! GenerateTags()
if exists("g:neovide")
	execute 'AsyncRun ctags -R --exclude="linux-master*"'
else
	call system("mkdir tags")
	execute 'silent AsyncRun -mode=0 bash ~/.vim/tags.sh'
endif
	autocmd User AsyncRunStop silent! call LoadTags()
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! Togglefunc2()
  execute g:param1 ? "set laststatus=0" : "set laststatus=2"
  let g:param1 = !g:param1
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! s:execute_selected_command(command)
  execute a:command
endfunction
"=====================================================end func====================================

"=====================================================begin func====================================
function! s:execute_command_cd()
 let g:command_list = [
  \ ':cd ~/codecenter/vimcode/2362/kernel/',
  \ ':cd ~/codecenter/vimcode/2362/lk/',
  \ ':cd ~/codecenter/vimcode/2362/pl/',
  \ ':cd ~/codecenter/vimcode/2406/kernel/',
  \ ':cd ~/codecenter/vimcode/2406/lk/',
  \ ':cd ~/codecenter/vimcode/2406/pl/',
  \ ':cd ~/codecenter/vimcode/2417/kernel/',
  \ ':cd ~/codecenter/vimcode/2417/lk/',
  \ ':cd ~/codecenter/vimcode/2417/pl/',
  \ ':cd ~/codecenter/vimcode/2415/kernel/',
  \ ':cd ~/codecenter/vimcode/2415/lk/',
  \ ':cd ~/codecenter/vimcode/2415/pl/',
  \ ':cd ~/codecenter/vimcode/2437/kernel/',
  \ ':cd ~/codecenter/vimcode/2437/lk/',
  \ ':cd ~/codecenter/vimcode/2437/pl/',
  \ ':cd ~/codecenter/v/common/',
  \ ]
 call fzf#run(fzf#wrap({
  \ 'source': g:command_list,
  \ 'sink': function('s:execute_selected_command')
  \ }))
endfunction

function! s:execute_command()
 let g:command_list = [
  \ ':FzfLua blines',
  \ ':BLines',
  \ ':Git blame',
  \ ':Lines',
  \ ':BCommits',
  \ ':Commits',
  \ ':set scrollbind',
  \ ':colorscheme molokai | set notermguicolors | call SetupCustomStatusLine()',
  \ ':colorscheme kanagawa | set termguicolors | call SetupCustomStatusLine()',
  \ ':colorscheme tokyonight-night | set termguicolors | call SetupCustomStatusLine()',
  \ ]
 call fzf#run(fzf#wrap({
  \ 'source': g:command_list,
  \ 'sink': function('s:execute_selected_command')
  \ }))
endfunction
"=====================================================end func====================================

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --threads 79 -L  --column --line-number --no-heading --color=always --smart-case  '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

let g:fzf_preview_window = ['up:65%', 'ctrl-f']
let g:fzf_vim = {}
let g:fzf_follow_links = 1
let g:fzf_vim_dir = expand('%:p:h')
let $FZF_DEFAULT_OPTS='--height 100% --layout=reverse'
let $FZF_DEFAULT_COMMAND = 'fd --type f --type l --hidden --follow --exclude .git'
let g:fzf_buffers_jump = 1
let g:fzf_action = {
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-t': 'tabnew' }
let g:fzf_layout = {
  \ 'window': {
    \ 'width': 1,
    \ 'height': 1,
    \ 'border': 'rounded'
  \ },
\ }

let mapleader = " "
let g:Lf_FollowLinks = 1  " 启用跟随符号链接
let g:Lf_ScanSymLink = 1  " 扫描符号链接目录
" 设置搜索深度（包含符号链接）
let g:Lf_MaxDepth = 30  " 最大搜索深度
let g:Lf_UseCache = 1   " 使用缓存提高性能
let g:Lf_UseMemoryCache = 1  " 使用内存缓存
" 自定义 rg 命令包含符号链接
let g:Lf_DefaultExternalTool = "rg"

let g:param1= 0
let g:initial_directory_set = 0

let NERDTreeOpenOnStartup=0
let NERDTreeWinPos="left"

let g:tagbar_position = 'left'
let Tlist_WinWidth = 50
let Tlist_Use_SingleClick = 1
let Tlist_Use_Right_Window = 0
let Tlist_WinWidth = 50

let g:tagbar_singleclick = 1
let g:tagbar_autoclose = 0

let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1 " US layout
let g:move_key_modifier_visualmode = 'S'
let loaded_matchparen=1
let g:ranger_map_keys = 0

let g:floaterm_width = 900  " 宽度为屏幕的 80%
let g:floaterm_height = 35 " 高度为屏幕的 60%
"let g:floaterm_height = 40 " 高度为屏幕的 60%
let g:floaterm_autoinsert = 1
let g:floaterm_autohide = 1
let g:floaterm_autoclose = 2
let current_file_dir = expand('%:p:h')
let current_working_dir = getcwd()
let g:ranger_replace_netrw = 1
let g:osc52_trim_newline = 1

let g:python3_host_prog = '/usr/bin/python3'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"

cabbrev rg Rg
cabbre git Git

if 0
nnoremap <leader>f :Files<CR>
nnoremap <leader>r :Buffers<CR>
else
"nnoremap <leader>f :LeaderfFile<CR>
"nnoremap <leader><leader> :LeaderfBufTag<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader><leader> :BTags<CR>
nnoremap <leader>r :LeaderfBuffer<CR>
endif

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

inoremap <A-h> <left>
inoremap <A-j> <down>
inoremap <A-k> <up>
inoremap <A-l> <right>

map u <Nop>
nnoremap u :u<cr>:w<cr>

vnoremap < <gv
vnoremap > >gv
vnoremap $ $h

nnoremap Z ZZ
inoremap jj <Esc>

vnoremap y "ay
vnoremap p "ap
nnoremap p "ap

if exists("g:neovide")
vnoremap r "+y
cnoremap <S-Space> <C-r>+
inoremap <S-Space> <C-r>+
map <S-Leftmouse> <Nop>
endif

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

map <Rightmouse>  <Leftmouse>E#
nnoremap # #N

nnoremap <C-Space> :
inoremap <C-Space> <C-n>

nnoremap <S-h> :vertical resize -3<CR>
nnoremap <S-l> :vertical resize +3<CR>
nnoremap <S-j> :resize +3<CR>
nnoremap <S-k> :resize -3<CR>

nnoremap <silent> <leader>e :call Togglefunc2()<CR>

if exists("g:neovide")
vnoremap<C-c> :w! ~/c/.vim/cvbuf.c<CR>
nnoremap<C-v> :r ~/c/.vim/cvbuf.c<CR>
else
vnoremap<C-c> :w! ~/.vim/cvbuf.c<CR>
nnoremap<C-v> :r ~/.vim/cvbuf.c<CR>
endif

" Close all the buffers
map <leader>ba :bufdo bd<cr>

nnoremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

map s <Nop>
nnoremap s <Plug>(easymotion-overwin-f2)

map  <Leader>o <Plug>(easymotion-bd-f)
nmap <Leader>o <Plug>(easymotion-overwin-f)

nnoremap <Leader>l <Plug>(easymotion-lineforward)
nnoremap <Leader>j <Plug>(easymotion-j)
nnoremap <Leader>k <Plug>(easymotion-k)
nnoremap <Leader>i <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

nnoremap<leader>t :FloatermToggle<CR>
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv

map f <Nop>
nnoremap f <C-o>zz
nnoremap F [[k2wzz
nnoremap ; :
vnoremap ; :
nnoremap a <Nop>
vnoremap a <Nop>
nnoremap a <C-]>zz

nnoremap <leader>s :Rg <C-r><C-w> = <CR>
vnoremap <leader>s y:Rg <C-r>" = <CR>
vnoremap R y:Rg <C-r>"<CR>
nnoremap R :Rg <C-r><C-w><CR>

vnoremap , :<C-u>call HighlightWithColorCode(input('Enter color code (0-255): '))<CR>
vnoremap <silent> # y/<C-r>"<CR>N

nnoremap <F1> 15zh
nnoremap <F2> 15zl
vnoremap <F1> 15zh
vnoremap <F2> 15zl
inoremap <F1> 15zh
inoremap <F2> 15zl
nnoremap <S-ScrollWheelRight> 15zl
nnoremap <S-ScrollWheelLeft> 15zh

nnoremap z z
vnoremap z z
vnoremap zf zfzf

vnoremap <Leader>dm :call DeleteVisualMatch()<CR>
if !exists("g:neovide")
vnoremap r <Plug>OSCYankVisual
endif

inoremap El ->
inoremap E1 ()<esc>i
inoremap E2 []<esc>i
inoremap E3 {}<esc>i
inoremap E4 {<esc>o}<esc>O

vnoremap E1 <esc>`>a)<esc>`<i(<esc>
vnoremap E2 <esc>`>a]<esc>`<i[<esc>
vnoremap E3 <esc>`>a}<esc>`<i{<esc>
vnoremap E4 <esc>`>a"<esc>`<i"<esc>
vnoremap E5 <esc>`>a'<esc>`<i'<esc>

nnoremap t :call <SID>execute_command_cd()<CR>
nnoremap q :call <SID>execute_command()<CR>

nnoremap c <Nop>
vnoremap c <Nop>

map ce :Rg<cr>
map cf :NERDTreeFind<cr>
map cc :TagbarToggle<cr>
map cs :sp<cr>
map cv :vsp<cr>
map ca :Ranger<cr>
map cq :copen 20<cr>
map cL :call system('rm -rf *2025_Will_Rich_* tags \n')<cr>
map ct :call GenerateTags()<cr>
map E <Plug>(expand_region_expand)
map 0 ^
map <leader>cd :cd %:p:h<cr>:pwd<cr>

autocmd BufWritePost * GitGutter
autocmd InsertLeave * silent! write
autocmd FocusGained,BufEnter * silent! checktime
autocmd BufRead,BufNewFile * source ~/.vim/plugged/c.vim/ftplugin/c.vim
autocmd BufRead,BufNewFile * source ~/.vim/plugged/c.vim/ftplugin/make.vim
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
autocmd VimLeave * call system("mv *_2025_Will_Rich_* tags/")
autocmd BufRead * silent! call LoadTags()
autocmd Syntax * source ~/.vim/plugged/c.vim/ftplugin/c.vim
autocmd User FloatermExit :FloatermNew --autoclose=0 exit 0
"autocmd BufRead,BufNewFile *  hi clear SignColumn
"autocmd BufRead,BufNewFile *  hi clear LineNr
autocmd BufEnter * if !g:initial_directory_set | silent! lcd %:p:h | let g:initial_directory_set = 1 | endif

hi TabLine      ctermfg=2 ctermbg=233
hi TabLineSel   ctermfg=118
hi TabLineFill  ctermfg=233
hi ModeMsg ctermbg=233 ctermfg=2
hi MoreMsg ctermbg=233 ctermfg=2
hi Question ctermbg=233 ctermfg=2
hi CursorLineNr ctermfg=2

hi Search ctermbg=white ctermfg=black
hi Visual ctermbg=235 ctermfg=none

nnoremap <leader>pp :setlocal paste!<cr>
" ======================= NEVIDIA 专属配置 =======================
if exists("g:neovide")
set linespace=8
let g:neovide_cursor_trail_size = 0.5          " 光标拖尾长度（0-1）
let g:neovide_floating_blur = 1                " 浮动窗口模糊效果
let g:neovide_multigrid = v:true               " 启用多网格渲染（提升性能）
let g:neovide_underline_automatic_scaling = v:true  " 下划线自动缩放
let g:neovide_fullscreen = v:true
set relativenumber

let g:neovide_cursor_animation_length = 0.1  "-- 动画时长
let g:neovide_cursor_trail_size = 0.5         "-- 轨迹大小
let g:neovide_cursor_antialiasing = v:true      "-- 抗锯齿

let g:neovide_cursor_vfx_particle_lifetime = 0.3        "-- 粒子存活时间
let g:neovide_cursor_vfx_particle_density = 5.0       "-- 粒子密度
let g:neovide_cursor_vfx_particle_speed = 10.0        "-- 粒子速度
let g:neovide_cursor_vfx_particle_phase = 1.5         "-- 粒子相位
let g:neovide_cursor_vfx_particle_curl = 1.0          "-- 粒子旋转
"let g:neovide_cursor_vfx_mode = "railgun"
let g:neovide_cursor_vfx_opacity = 100.0

let g:neovide_font_face = "FiraCode Nerd Font"
let g:neovide_font_size = 10
let g:neovide_padding_top = 1                 " 窗口顶部留白
let g:neovide_remember_window_size = v:true    " 记忆窗口尺寸
let g:neovide_power_save_mode = v:true
let g:neovide_scale_factor = 0.84
let g:neovide_opacity = 1
let g:neovide_scroll_animation_length = 0.6

let g:neovide_cursor_trail_length= 0.2
let g:fzf_colors = {
	\ 'fg':      ['fg', 'Normal'],
	\ 'bg':      ['bg', 'Normal'],
	\ 'hl':      ['fg', 'Comment'],
	\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
	\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
	\ 'hl+':     ['fg', 'Statement'],
	\ 'info':    ['fg', 'PreProc'],
	\ 'border':  ['fg', 'Ignore'],
	\ 'prompt':  ['fg', 'Conditional'],
	\ 'pointer': ['fg', 'Exception'],
	\ 'marker':  ['fg', 'Keyword'],
	\ 'spinner': ['fg', 'Label'],
	\ 'header':  ['fg', 'Comment'] }

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --threads 5  -L --column --line-number --no-heading --color=always --smart-case  '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

endif "neovide config
" ======================= NEVIDIA 专属配置 =======================

"""""""""""""""""""""""""""""""COC.NVIM"""""""""""""""""""""""""""""""""""
if !exists("g:neovide")
let g:coc_node_path='~/.user/node-v24.0.1-linux-x64/bin/node'
endif
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <silent><expr> <C-@> coc#refresh()
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<CR>"
inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" 展开或跳转到下一个占位符
imap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#confirm() : "\<Tab>"
" 强制触发片段展开（即使补全菜单未打开）

" 跳转片段占位符
let g:coc_snippet_next = '<C-j>'
let g:coc_snippet_prev = '<C-k>'
"""""""""""""""""""""""""""""""COC.NVIM"""""""""""""""""""""""""""""""""""

